# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Ib05Sep5i5Fr7P-JNALZeKJhAM1XcyX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

df = pd.read_excel('/content/airbnb.xlsx')
df.head()

df.duplicated().value_counts()
df.drop_duplicates(inplace=True)

df.drop(['house_rules', 'license'], axis=1, inplace=True)

df['price'] = df['price'].astype(str).str.replace('$', '', regex=False)
df['service fee'] = df['service fee'].astype(str).str.replace('$', '', regex=False)
df['price'] = df['price'].astype(str).str.replace(',', '', regex=False)
df['service fee'] = df['service fee'].astype(str).str.replace(',', '', regex=False)

df.rename(columns={'price': 'price_$', 'service fee': 'service_fee_$'}, inplace=True)

df.dropna(inplace=True)

df['price_$'] = df['price_$'].astype(float)
df['service_fee_$'] = df['service_fee_$'].astype(float)
df['id'] = df['id'].astype(str)
df['host id'] = df['host id'].astype(str)
df['last review'] = pd.to_datetime(df['last review'])

df['neighbourhood group'] = df['neighbourhood group'].replace('brookln', 'Brooklyn')

Q1 = df['availability 365'].quantile(0.25)
Q3 = df['availability 365'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df = df[(df['availability 365'] >= lower_bound) & (df['availability 365'] <= upper_bound)]

df.head()

summary = {}

summary["shape_after_clean"] = df.shape
summary["columns"] = list(df.columns)
summary["dtypes"] = df.dtypes.astype(str).to_dict()
summary["missing_pct_top10"] = (df.isna().mean().sort_values(ascending=False)*100).round(2).head(10).to_dict()
summary["price_sample"] = df["price_$"].head(5).tolist() if "price_$" in df.columns else "price_$ missing"
summary["service_fee_sample"] = df["service_fee_$"].head(5).tolist() if "service_fee_$" in df.columns else "service_fee_$ missing"
summary["neighbourhood_group_values"] = (
    df["neighbourhood group"].value_counts().to_dict()
    if "neighbourhood group" in df.columns else "column missing"
)
if "availability 365" in df.columns:
    q1 = df["availability 365"].quantile(0.25)
    q3 = df["availability 365"].quantile(0.75)
    summary["availability_bounds_used"] = [float(q1 - 1.5*(q3-q1)), float(q3 + 1.5*(q3-q1))]

summary

df.dropna(inplace=True)

col = 'room type' if 'room type' in df.columns else 'property type'
pt = df[col].value_counts().to_frame(name='count')

bars = plt.bar(pt.index, pt['count'])
plt.bar_label(bars, labels=pt['count'], padding=4)
plt.ylim(0, 50000)
plt.xlabel('Room Type' if col == 'room type' else 'Property Type')
plt.ylabel('Room Type Count' if col == 'room type' else 'Property Type Count')
plt.title('Property Types and their count in the Dataset')
plt.tight_layout()
plt.show()

# Q2) Which neighbourhood group has the highest number of listings?
hood_group = df['neighbourhood group'].value_counts().to_frame(name='count')

ax = plt.bar(hood_group.index, hood_group['count'])
plt.bar_label(ax, labels=hood_group['count'], padding=4)
plt.ylim(0, hood_group['count'].max() * 1.15)
plt.xlabel('Neighbourhood Groups'); plt.ylabel('Number of Listings')
plt.xticks(rotation=45); plt.title('Which Neighbourhood Group has the Highest Number of Listings?')
plt.show()

# Q3) Which neighbourhood group has the highest average price?
avg_price = df.groupby('neighbourhood group')['price_$'].mean().sort_values(ascending=False).to_frame()

ax = plt.bar(avg_price.index, avg_price['price_$'])
plt.bar_label(ax, labels=avg_price['price_$'].round(2), label_type='edge', padding=4)
plt.ylim(0, avg_price['price_$'].max() * 1.15)
plt.xlabel('Neighbourhood Group'); plt.ylabel('Average Price ($)')
plt.xticks(rotation=45); plt.title('Average Price ($) by Neighbourhood Group')
plt.show()

col = 'Construction year'

df.loc[:, col] = pd.to_numeric(df[col], errors='coerce')
df.dropna(subset=[col], inplace=True)
df.loc[:, col] = df[col].astype(int)

df[col].head()

# Q4) Is there a relationship between construction year and price?
year_price = df.groupby('Construction year')['price_$'].mean().to_frame()

year_price.plot(kind='line', legend=False)
plt.xlabel('Construction Year')
plt.ylabel('Average Price ($)')
plt.title('Average Price ($) for Properties in each Construction Year')
plt.tight_layout()
plt.show()

# Q5) Who are the top 10 hosts by calculated host listing count?
hosts = (df.groupby('host name')['calculated host listings count']
           .sum().sort_values(ascending=False).nlargest(10).to_frame())

ax = plt.bar(hosts.index, hosts['calculated host listings count'])
plt.bar_label(ax, labels=hosts['calculated host listings count'], label_type='edge', padding=3)
plt.xlabel('Host Name'); plt.ylabel('Calculated Host Listings Count')
plt.xticks(rotation=80); plt.ylim(0, hosts['calculated host listings count'].max() * 1.15)
plt.title('Top 10 Hosts by Calculated Host Listings Count')
plt.tight_layout(); plt.show()

# Q6)Are hosts with verified identities more likely to receive positive reviews?
review = (df.groupby('host_identity_verified')['review rate number']
            .mean().sort_values(ascending=False).to_frame())

ax = plt.bar(review.index, review['review rate number'])
plt.bar_label(ax, labels=review['review rate number'].round(2), padding=4)
plt.ylim(0, 4.5)
plt.xlabel('Host Verification Status'); plt.ylabel('Average Review Rate')
plt.title('Average Review Rate for each Verification Status')
plt.show()

# Is there a correlation between the price of a listing and its service fee?
print(df['price_$'].corr(df['service_fee_$']))
sns.regplot(data=df, x='price_$', y='service_fee_$', scatter_kws={'alpha':0.3})
plt.xlabel('Price ($)'); plt.ylabel('Service Fee ($)')
plt.title('Regression: Price vs Service Fee')
plt.tight_layout(); plt.show()

# 8) What is the average review rate number, and does it vary by neighbourhood group and room type?
ARRN = (df.groupby(['neighbourhood group','room type'])['review rate number']
          .mean().to_frame())
display(ARRN)

plt.figure(figsize=(12,10))
sns.barplot(data=df, x='neighbourhood group', y='review rate number', hue='room type')
plt.xlabel('Neighbourhood Group'); plt.ylabel('Average Review Rate')
plt.xticks(rotation=45)
plt.title('Average Review Rate for each Room/Property Type in each Neighbourhood Group')
plt.tight_layout(); plt.show()

# 9 Are hosts with higher calculated host listings count more likely to maintain higher availability?
corr_val = df['calculated host listings count'].corr(df['availability 365'])
print('Pearson correlation:', corr_val)

sns.regplot(data=df, x='calculated host listings count', y='availability 365', scatter_kws={'alpha':0.3})
plt.xlabel('Calculated Host Listings'); plt.ylabel('Availability 365')
plt.title('Regression: Calculated Host Listings Count vs Availability 365')
plt.tight_layout(); plt.show()